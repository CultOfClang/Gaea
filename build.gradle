import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.70'
    id 'maven-publish'
    id "org.jetbrains.kotlin.plugin.serialization" version '1.3.70'
}

if (System.getenv("GITHUB_RUN_NUMBER")!=null) {
    pluginVersion += "." + System.getenv("GITHUB_RUN_NUMBER")
}

group = pluginGroup
version = pluginVersion

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def github_username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
def github_password = project.findProperty("gpr.key") ?: System.getenv("PASSWORD")

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }

    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/CultOfClang/Minecraft/")
        credentials {
            username = github_username
            password = github_password
        }
    }
}

dependencies {
    compileOnly 'org.bukkit:bukkit:1.15.2-R0.1-SNAPSHOT'
    // i guess.
    implementation 'org.cultofclang.minecraft:kotlinspice:0.1.9'
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.6.0")
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [version: version]
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/CultOfClang/Minecraft/")
            credentials {
                username = github_username
                password = github_password
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from components.java

            pom {
                name = 'Gaea'
                description = 'World slowly returns to original state.'
                url = 'https://github.com/CultOfClang/Gaea'

                licenses {
                    license {
                        name = 'CC BY-ND 4.0'
                        url = 'https://creativecommons.org/licenses/by-nd/4.0/'
                    }
                }
                developers {
                    developer {
                        id = 'lizelive'
                        name = 'lizelive'
                        email = 'lize@cultofclang.org'
                    }
                }
                scm {
                    connection = 'scm:https://github.com/CultOfClang/Gaea.git'
                    developerConnection = 'scm:git:ssh://git@github.com:CultOfClang/Gaea.git'
                    url = 'https://github.com/CultOfClang/Gaea'
                }
            }
        }



    }
}


//Move into plugins folder
if (project.hasProperty("plugin_path") && plugin_path) {
    task copyJar(type: Copy) {
        from jar
        into plugin_path
    }
    build.dependsOn copyJar
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

test{
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }
}